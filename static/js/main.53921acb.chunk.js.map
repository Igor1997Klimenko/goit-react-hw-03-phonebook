{"version":3,"sources":["Component/ContactForm/ContactForm.jsx","Component/ContactsListItem/ContactSListItem.jsx","Component/ContactList/ContactList.jsx","Component/Container/Container.jsx","Component/Filter/Filter.jsx","App.js","index.js","Component/ContactForm/ContactForm.module.css"],"names":["InitialState","name","number","ContactForm","state","handleInputChange","e","setState","target","value","handleSubmit","preventDefault","onSubmit","props","contactExits","alert","resetState","contacts","find","this","className","styles","forma","blockform","htmlFor","type","pattern","title","required","onChange","Component","ContactListItem","id","onClick","ContactList","ContactsDelete","map","Container","children","Filter","App","filter","handleFormSubmit","userInfo","generateId","handleFilterChange","getFilterContact","normalizedFilter","toLowerCase","includes","nandleContactDelete","contactId","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.53921acb.chunk.js","sourcesContent":["import {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styles from '../ContactForm/ContactForm.module.css'\r\n\r\nconst InitialState = {\r\n    name: '',\r\n    number: '',\r\n};\r\n\r\nclass ContactForm extends Component {\r\n\r\n    static propTypes = {\r\n        onSubmit: PropTypes.func.isRequired,\r\n        contacts: PropTypes.array.isRequired,\r\n    }\r\n\r\nstate = {...InitialState};\r\n\r\nhandleInputChange = e => this.setState({[e.target.name]: e.target.value});\r\nhandleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const {onSubmit} = this.props;\r\n    const {name} = this.state;\r\n    \r\n    if(this.contactExits()){\r\n        alert(`${name} is already in contacts`)\r\n        return;\r\n    }\r\n    onSubmit(this.state);\r\n    this.resetState();\r\n};\r\n\r\nresetState = () => this.setState({...InitialState});\r\n\r\ncontactExits = () => this.props.contacts.find(({name}) => name === this.state.name);\r\n\r\nrender() {\r\n    const {name, number} = this.state;\r\n    return(\r\n        <form className={styles.forma} onSubmit={this.handleSubmit}>\r\n            <div className={styles.blockform}>\r\n            <label htmlFor=\"\">\r\n                <span>Name</span>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    value={name}\r\n                    onChange={this.handleInputChange}\r\n                    />\r\n            </label>\r\n                \r\n                <label>\r\n                <span>Number</span>\r\n                <input\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={this.handleInputChange}\r\n                    />\r\n                </label>\r\n            </div>\r\n            <button type=\"submit\">Add contact</button>\r\n        </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;","import PropTypes from 'prop-types'\r\n\r\nconst ContactListItem = ({id,name,number,onClick}) => {\r\n    return(\r\n        <>\r\n        <span>\r\n            {name}: {number}\r\n        </span>\r\n        <button type=\"button\" onClick={() => onClick(id)}>\r\n            Delete\r\n        </button>\r\n        </>\r\n    );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    onClick: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ContactListItem","import PropTypes from 'prop-types'\r\nimport ContactListItem from '../ContactsListItem/ContactSListItem'\r\n\r\n\r\nconst ContactList = ({contacts, ContactsDelete}) => {\r\n    return(\r\n        <ul>\r\n        {contacts.map(({id, name, number}) => (\r\n        <li key={id}>\r\n            <ContactListItem\r\n                id={id}\r\n                name={name}\r\n                number={number}\r\n                onClick={ContactsDelete}\r\n            />\r\n        </li>          \r\n    ))}\r\n    </ul>\r\n    )\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n    ).isRequired,\r\n};\r\n\r\nexport default ContactList","import PropTypes from 'prop-types'\r\n\r\nconst Container = ({children}) => {\r\n    return <div>{children}</div>\r\n}\r\n\r\nContainer.propTypes = {\r\n    children: PropTypes.node,\r\n}\r\n\r\nexport default Container","import PropTypes from 'prop-types'\r\n\r\nconst Filter = ({value, onChange}) => {\r\n    return(\r\n        <label>\r\n            <span>Find contacts by name</span>\r\n            <input type=\"text\"\r\n                   name=\"filter\"\r\n                   value={value}\r\n                   onChange={onChange} \r\n            />\r\n        </label>\r\n    );\r\n}\r\n\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Filter","import {Component} from 'react'\r\nimport {v4 as generateId} from 'uuid'\r\nimport ContactForm from './Component/ContactForm/ContactForm'\r\nimport ContactList from './Component/ContactList/ContactList'\r\nimport Container from './Component/Container/Container'\r\nimport Filter from './Component/Filter/Filter'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n  }\r\n\r\nhandleFormSubmit = userInfo => \r\nthis.setState(({contacts}) =>({\r\n contacts: [\r\n   ...contacts,\r\n   {\r\n     id:generateId(),\r\n     ...userInfo,\r\n   }\r\n ]\r\n}))\r\n\r\nhandleFilterChange = e => this.setState({filter: e.target.value});\r\n\r\ngetFilterContact = () => {\r\n  const {contacts,filter} = this.state;\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return contacts.filter(({name}) => \r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n}\r\n\r\nnandleContactDelete = contactId => {\r\n  this.setState(({contacts}) => ({\r\n  contacts: contacts.filter(({id}) => id !== contactId),\r\n  }));\r\n}\r\n\r\n render() {\r\n\r\nconst {contacts, filter} = this.state\r\n\r\n   return(\r\n     <Container>\r\n     <h1>Phonebook</h1>\r\n    <ContactForm\r\n    onSubmit = {this.handleFormSubmit}\r\n    contacts = {[...contacts]}\r\n    />\r\n\r\n    <h2>Contacts</h2>\r\n    <Filter value={filter} onChange={this.handleFilterChange}/>\r\n    <ContactList \r\n    contacts={this.getFilterContact()} \r\n    ContactsDelete={this.nandleContactDelete}/>\r\n    </Container>\r\n   );\r\n }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockform\":\"ContactForm_blockform__2WLc2\"};"],"sourceRoot":""}